package main

import (
	"fmt"
	"sync"
	"time"
)

// Структура Counter представляет счетчик с методами для инкрементации и получения значения.
type Counter struct {
	mu    sync.Mutex // Мьютекс для защиты доступа к счетчику
	count int        // Значение счетчика
}

// Метод для инкрементации счетчика
func (c *Counter) Increment() {
	c.mu.Lock()         // Захватываем мьютекс перед доступом к счетчику
	defer c.mu.Unlock() // Освобождаем мьютекс после завершения операции

	c.count++ // Инкрементируем счетчик
}

// Метод для получения текущего значения счетчика
func (c *Counter) Value() int {
	c.mu.Lock()         // Захватываем мьютекс перед доступом к счетчику
	defer c.mu.Unlock() // Освобождаем мьютекс после завершения операции

	return c.count // Возвращаем текущее значение счетчика
}

func main() {
	counter := Counter{} // Создаем экземпляр структуры Counter

	// Запускаем несколько горутин для инкрементации счетчика параллельно
	for i := 0; i < 10; i++ {
		go func() {
			for j := 0; j < 1000; j++ {
				counter.Increment() // Инкрементируем счетчик 1000 раз
			}
		}()
	}

	// Ждем некоторое время, чтобы все горутины завершили свою работу
	time.Sleep(1 * time.Second)

	// Получаем и выводим итоговое значение счетчика
	fmt.Println("Итоговое значение счетчика:", counter.Value())
}
